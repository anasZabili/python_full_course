Liste:
  myList.extend(anotherListe):
    concatene deux list entre elle 
  myList.append(element):
    classique ajoute un element dans la list
  myList.insert(index, element):
    insert element a l'index index en poussant vers la droite les autres elements
  myList.remove(element);
    retire element
  myList.clear();
     vide la liste
  myList.pop():
    retire la derniere element de la list
  myList.index(element):
    renvoie l'index de element dans la liste une erreur sinon
  myList.count(element): 
    compte le nombre d'element dans la list
  myList.reverse:
    reverse la list
  myList.copy():
    renvoie une copie de la liste

Tuples: 
  un tuples est assez similaire a une Liste

  Cree un tuples:
    myTuple = (x, y)
    l'avantage des tuples est qu'il sont immutable 

Expression booleans
  && = and
  || = or
  !x = not(x)

Dictionnaries
  un dictionnaire est un pair clef valeur (une map en gros)
  un dico ce cree de la meme façon qu'un objet en js
  monthConversion = {
  "Jan": "January",
  "Feb": "February",
  "Mar": "March",
  "Apr": "April",
  "May": "May",
  "Jun": "June",
  "Jul": "July",
  "Aug": "August",
  "Sep": "September",
  "Oct": "October",
  "Nov": "November",
  "Dec": "December"
  }

  acceder a une valeur :
    -monthConversion["Feb"]
    monthConversion.get("Feb")
  
  definir une valeur par default si la clef n'est pas trouvé :
    print(monthConversion.get("Augu", "Not a valid key"))
    renvoie "not a valid key" si la clef n'est pas trouvé


  For:
    louper a travers une string

    for letter in "Giraffe Academy":
      print(letter)

    a travers un array

    for name in tab:
      print(name)

  Exponent fonction: 
    print(2**3)  

  IF IN (super bien):
    if letter in "AEIOUaeiou":


  Try Expect:
    try:
      number = int(input("Enter a number: "))
      print(number)
    except ZeroDivisionError as err:
      print(err)
    except ValueError:
      print("Please enter a number")
    except:
      print("dont know what the error is but i catch it right there")

    except sans argument catch toute les erreurs

  Fichier: 
    Ouverture:  
      file = open("test.txt", 'r')
    
    Mode d'ouverture: 
      -r(read)
      -w(write)
      -a(append)
      -r+(r + w)

    Verifier si un fichier peut etre lu:
      file.readable()
    
    Lecture: 
      print(file.read())
        lit tout le fichier

      file.readline()
        lit le fichier ligne par ligne
      
      file..readlines() (super cool)
        lit tout le fichier et place chaque ligne dans un index de tableau

  Heritage class:
    pour qu'un class herite du autre la syntax:
      class MyCLass(ParentClass):      
      


